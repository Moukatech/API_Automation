{"name": "test_get_all_user_posts", "status": "broken", "statusDetails": {"message": "cerberus.validator.DocumentError: 'id' is not a document, must be a dict", "trace": "def test_get_all_user_posts():\n    \n        response = \"\"\n        users_data =users_v2.get_all_users()\n        response_text = users_data.json()\n        user_id = [user['id'] for user in response_text]\n        selected_id = random.choice(user_id) # select random a user id to be used in getting the posts\n    \n        response_data = user_posts_v2.get_all_user_posts(selected_id)\n        response = response_data.json()\n        assert (response_data.status_code == 200), f\"Status Code validation failed , Rather found : {response_data.status_code}\"\n    \n        if not response:\n            # creates a new post for a user without a post\n            resp = user_posts_v2.create_new_post(selected_id)\n            assert_that(resp.json()['user_id']).is_equal_to(selected_id)\n            assert_that(resp.json()).is_not_empty()\n            response = resp.json()\n    \n        # validate the response body is equivalent to the set schema.\n>       valid, errors = schema_validator.multiple_data_validator(response, all_schemas.posts_schema)\n\ntests/test_user_posts.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nschemas/schema_validator.py:7: in multiple_data_validator\n    is_valid = validator.validate(post)\n../../../.local/share/virtualenvs/API_Automation-ON8TyLLV/lib/python3.10/site-packages/cerberus/validator.py:1041: in validate\n    self.__init_processing(document, schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <cerberus.validator.Validator object at 0x1104f31c0>, document = 'id', schema = None\n\n    def __init_processing(self, document, schema=None):\n        self._errors = errors.ErrorList()\n        self.recent_error = None\n        self.document_error_tree = errors.DocumentErrorTree()\n        self.schema_error_tree = errors.SchemaErrorTree()\n        self.document = copy(document)\n        if not self.is_child:\n            self._is_normalized = False\n    \n        if schema is not None:\n            self.schema = DefinitionSchema(self, schema)\n        elif self.schema is None:\n            if isinstance(self.allow_unknown, Mapping):\n                self._schema = {}\n            else:\n                raise SchemaError(errors.SCHEMA_ERROR_MISSING)\n        if document is None:\n            raise DocumentError(errors.DOCUMENT_MISSING)\n        if not isinstance(document, Mapping):\n>           raise DocumentError(errors.DOCUMENT_FORMAT.format(document))\nE           cerberus.validator.DocumentError: 'id' is not a document, must be a dict\n\n../../../.local/share/virtualenvs/API_Automation-ON8TyLLV/lib/python3.10/site-packages/cerberus/validator.py:656: DocumentError"}, "start": 1683639819065, "stop": 1683639820390, "uuid": "b0b9be2c-ba29-458a-a664-21fc6518c6a5", "historyId": "3bd63f323432618023be4cb3335ad9b4", "testCaseId": "3bd63f323432618023be4cb3335ad9b4", "fullName": "tests.test_user_posts#test_get_all_user_posts", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_posts"}, {"name": "host", "value": "Mocha.local"}, {"name": "thread", "value": "71055-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_posts"}]}