{"name": "test_create_new_user", "status": "broken", "statusDetails": {"message": "cerberus.validator.DocumentError: 'id' is not a document, must be a dict", "trace": "def test_create_new_user():\n            email = f\"{str(uuid4())}@testacrolinx.com\"\n            response_data = users_v2.create_new_user(email)\n            # users = users_v2.get_all_users()\n            # users_v2.search_created_user(users.json(), response_data)\n            assert_that(response_data.status_code, description='Person not created').is_equal_to(requests.codes.created)\n            assert_that(response_data.json()['email']).contains(email)\n    \n            # validate the response body is equivalent to the set schema.\n>           valid, errors = schema_validator.schema_data_validator(response_data.json(), all_schemas.users_schema)\n\ntests/test_users_v2.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nschemas/schema_validator.py:11: in schema_data_validator\n    is_valid = validator.validate(post)\n../../../.local/share/virtualenvs/API_Automation-ON8TyLLV/lib/python3.10/site-packages/cerberus/validator.py:1041: in validate\n    self.__init_processing(document, schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <cerberus.validator.Validator object at 0x102c68940>, document = 'id', schema = None\n\n    def __init_processing(self, document, schema=None):\n        self._errors = errors.ErrorList()\n        self.recent_error = None\n        self.document_error_tree = errors.DocumentErrorTree()\n        self.schema_error_tree = errors.SchemaErrorTree()\n        self.document = copy(document)\n        if not self.is_child:\n            self._is_normalized = False\n    \n        if schema is not None:\n            self.schema = DefinitionSchema(self, schema)\n        elif self.schema is None:\n            if isinstance(self.allow_unknown, Mapping):\n                self._schema = {}\n            else:\n                raise SchemaError(errors.SCHEMA_ERROR_MISSING)\n        if document is None:\n            raise DocumentError(errors.DOCUMENT_MISSING)\n        if not isinstance(document, Mapping):\n>           raise DocumentError(errors.DOCUMENT_FORMAT.format(document))\nE           cerberus.validator.DocumentError: 'id' is not a document, must be a dict\n\n../../../.local/share/virtualenvs/API_Automation-ON8TyLLV/lib/python3.10/site-packages/cerberus/validator.py:656: DocumentError"}, "start": 1683640622998, "stop": 1683640623494, "uuid": "bc57cdf7-71a1-4304-9d9e-047b69e0b11e", "historyId": "52182f928c7885e0e0ca53425e10f5b7", "testCaseId": "52182f928c7885e0e0ca53425e10f5b7", "fullName": "tests.test_users_v2#test_create_new_user", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_users_v2"}, {"name": "host", "value": "Mocha.local"}, {"name": "thread", "value": "78390-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_users_v2"}]}